// src/app/services/deepseek-ai.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';

export interface DeepSeekRequest {
  model: string;
  messages: Array<{
    role: 'user' | 'assistant' | 'system';
    content: string;
  }>;
  temperature?: number;
  max_tokens?: number;
}

export interface DeepSeekResponse {
  choices: Array<{
    message: {
      content: string;
      role: string;
    };
    finish_reason: string;
  }>;
  usage: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

export interface FaceAnalysisData {
  faceWidth: number;
  faceHeight: number;
  eyeDistance: number;
  mouthWidth: number;
  noseHeight: number;
  jawWidth: number;
  noseToEyeRatio: number;
  faceRatio: number;
  jawRatio: number;
  confidence: number;
}

export interface AIAnalysisResult {
  estimatedAge: string;
  skinType: string;
  faceShape: string;
  personalityTraits: string[];
  beautyTips: string[];
  productRecommendations: string[];
  confidence: number;
  explanation: string;
}

@Injectable({
  providedIn: 'root'
})
export class DeepseekAiService {
  private readonly API_URL = 'https://api.deepseek.com/v1/chat/completions';
  private readonly API_KEY = 'YOUR_DEEPSEEK_API_KEY'; // Vous remplacerez √ßa

  constructor(private http: HttpClient) {}

  // M√©thode pour configurer la cl√© API
  setApiKey(apiKey: string) {
    (this as any).API_KEY = apiKey;
  }

  // Analyse avanc√©e avec DeepSeek
  async analyzeWithAI(faceData: FaceAnalysisData): Promise<AIAnalysisResult> {
    const prompt = this.buildAnalysisPrompt(faceData);
    
    const request: DeepSeekRequest = {
      model: 'deepseek-chat',
      messages: [
        {
          role: 'system',
          content: `Tu es un expert en analyse faciale et cosm√©tologie. Tu analyses les donn√©es g√©om√©triques d'un visage pour donner des recommandations pr√©cises sur l'√¢ge, le type de peau, et les produits cosm√©tiques adapt√©s. 

R√©ponds TOUJOURS au format JSON strict suivant :
{
  "estimatedAge": "XX-XX ans",
  "skinType": "description du type de peau",
  "faceShape": "forme du visage",
  "personalityTraits": ["trait1", "trait2", "trait3"],
  "beautyTips": ["conseil1", "conseil2", "conseil3"],
  "productRecommendations": ["produit1", "produit2", "produit3"],
  "confidence": 0.85,
  "explanation": "Explication de l'analyse"
}`
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.3,
      max_tokens: 1000
    };

    try {
      const response = await this.makeRequest(request).toPromise();
      return this.parseAIResponse(response);
    } catch (error) {
      console.error('Erreur DeepSeek AI:', error);
      return this.getFallbackAnalysis();
    }
  }

  private buildAnalysisPrompt(faceData: FaceAnalysisData): string {
    return `
Analyse ces donn√©es faciales g√©om√©triques d'une personne et donne-moi une √©valuation pr√©cise :

DONN√âES MESUR√âES :
- Largeur du visage: ${faceData.faceWidth.toFixed(2)}px
- Hauteur du visage: ${faceData.faceHeight.toFixed(2)}px
- Distance entre les yeux: ${faceData.eyeDistance.toFixed(2)}px
- Largeur de la bouche: ${faceData.mouthWidth.toFixed(2)}px
- Hauteur du nez: ${faceData.noseHeight.toFixed(2)}px
- Largeur de la m√¢choire: ${faceData.jawWidth.toFixed(2)}px

RATIOS CALCUL√âS :
- Ratio nez/≈ìil: ${faceData.noseToEyeRatio.toFixed(4)}
- Ratio hauteur/largeur visage: ${faceData.faceRatio.toFixed(4)}
- Ratio m√¢choire/largeur: ${faceData.jawRatio.toFixed(4)}
- Confiance de d√©tection: ${(faceData.confidence * 100).toFixed(1)}%

Bas√© sur ces mesures pr√©cises, estime l'√¢ge, le type de peau, la forme du visage, et donne des recommandations de produits cosm√©tiques et de beaut√© adapt√©s. Sois pr√©cis et r√©aliste dans tes estimations.
    `;
  }

  private makeRequest(request: DeepSeekRequest): Observable<DeepSeekResponse> {
    const headers = new HttpHeaders({
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${(this as any).API_KEY}`
    });

    return this.http.post<DeepSeekResponse>(this.API_URL, request, { headers });
  }

  private parseAIResponse(response: DeepSeekResponse | undefined): AIAnalysisResult {
    if (!response || !response.choices || response.choices.length === 0) {
      return this.getFallbackAnalysis();
    }

    try {
      const content = response.choices[0].message.content;
      console.log('ü§ñ R√©ponse brute DeepSeek:', content);
      
      // Extraire le JSON de la r√©ponse
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Pas de JSON trouv√© dans la r√©ponse');
      }

      const parsedResult = JSON.parse(jsonMatch[0]);
      console.log('‚úÖ Analyse AI pars√©e:', parsedResult);
      
      return {
        estimatedAge: parsedResult.estimatedAge || "25-35 ans",
        skinType: parsedResult.skinType || "Peau normale",
        faceShape: parsedResult.faceShape || "Ovale",
        personalityTraits: parsedResult.personalityTraits || [],
        beautyTips: parsedResult.beautyTips || [],
        productRecommendations: parsedResult.productRecommendations || [],
        confidence: parsedResult.confidence || 0.5,
        explanation: parsedResult.explanation || "Analyse bas√©e sur les proportions faciales"
      };

    } catch (error) {
      console.error('Erreur parsing r√©ponse AI:', error);
      return this.getFallbackAnalysis();
    }
  }

  private getFallbackAnalysis(): AIAnalysisResult {
    return {
      estimatedAge: "25-35 ans",
      skinType: "Peau normale",
      faceShape: "Ovale",
      personalityTraits: ["Confiant", "Amical", "Authentique"],
      beautyTips: [
        "Hydratez votre peau quotidiennement",
        "Utilisez une protection solaire",
        "Nettoyez votre visage matin et soir"
      ],
      productRecommendations: [
        "Cr√®me hydratante quotidienne",
        "Nettoyant doux",
        "Protection solaire SPF 30+"
      ],
      confidence: 0.7,
      explanation: "Analyse de base bas√©e sur les proportions faciales standard"
    };
  }

  // Test de connexion API
  async testConnection(): Promise<boolean> {
    const testRequest: DeepSeekRequest = {
      model: 'deepseek-chat',
      messages: [
        {
          role: 'user',
          content: 'Test de connexion. R√©ponds juste "OK".'
        }
      ],
      max_tokens: 10
    };

    try {
      const response = await this.makeRequest(testRequest).toPromise();
      console.log('üîó Test connexion DeepSeek:', response);
      return response?.choices?.[0]?.message?.content?.includes('OK') || false;
    } catch (error) {
      console.error('‚ùå √âchec test connexion:', error);
      return false;
    }
  }
}